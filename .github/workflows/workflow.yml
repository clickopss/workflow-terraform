name: Terraform

on:
  workflow_call:
    inputs:
      tf_cloud:
        type: string
        required: true

jobs:
  terraform:
    env:
      TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    outputs:
      public_ip: ${{ steps.tf_output.outputs.public_ip }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform ${{ github.event.inputs.status }}
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: |
        cd terraform
        terraform ${{ github.event.inputs.status }} -auto-approve -input=false

    - name: Get Terraform Output
      id: tf_output
      run: |
        cd terraform
        public_ip=$(terraform output -json | jq -r ".public_ips.value.ipv4_address")
        echo "$public_ip"
        echo "public_ip=${public_ip}" >> $GITHUB_OUTPUT
